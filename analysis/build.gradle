/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.6/userguide/tutorial_java_projects.html
 */

plugins {
    id 'java'
    id 'application'
    id 'distribution'
    id "org.jetbrains.kotlin.jvm" version "1.2.41"
}

// Define the main class for the application
//mainClassName = 'com.github.zengineering.TheOfficeKt'
mainClassName = 'com.github.zengineering.CharacterLineCountsKt'

// start scripts for each main
ext.multipleStartScripts = true

group 'com.github.zengineering'

// dependency versions
ext {
    kotlin_version = '1.2.41'
    sqlite_jdbc_version = '3.21.0.1'
    exposed_version = '0.10.2'
    kotlin_argparser_version = '2.0.6'
    log4j_version = '1.7.25'
    gson_version = '2.8.4'
    picocli_version = '3.0.1'
}

dependencies {
    // Use JUnit test framework
    testCompile 'junit:junit:4.12'

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version

    // sqlite i/o
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: sqlite_jdbc_version
    compile group: 'org.jetbrains.exposed', name: 'exposed', version: exposed_version

    // logging (used by Exposed)
    compile group: 'org.slf4j', name: 'slf4j-api', version: log4j_version
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: log4j_version

    // Google Json
    compile group: 'com.google.code.gson', name: 'gson', version: gson_version

    // commnadline parser
    compile group: 'info.picocli', name: 'picocli', version: picocli_version
}

// dependencies of the project
repositories {
    jcenter()
    mavenCentral()
    maven {
        url  "https://dl.bintray.com/kotlin/exposed"
    }
}

if (ext.multipleStartScripts) {
    // Create scripts for entry points
    // Subproject must apply application plugin to be able to call this method.
    task createAllStartScripts() { /* doLast { placeholder } */ }
    
    def scripts = [ 
        "TheOfficeKt" : "com.github.zengineering.TheOfficeKt",
        "correctNamesinDb" : "com.github.zengineering.DatabaseNameCorrectionsKt",
        "countLinesPerCharacter" : "com.github.zengineering.CharacterLineCountsKt",
    ]
    scripts.each() { scriptName, className ->
            def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
            mainClassName = className
            applicationName = scriptName
            outputDir = new File(project.buildDir, 'scripts')
            classpath = jar.outputs.files + project.configurations.runtime
        }
          applicationDistribution.into("bin") {
                from(t)
                fileMode = 0755
        }
        createAllStartScripts.dependsOn(t)
    }
}

run {
    if (System.getProperty("exec.args")) {
        args System.getProperty("exec.args").split()
    }
}

